# -*- coding: utf-8 -*-
"""time_series_using_lstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xHLB1d8yus5BJsQJ0RBgJyebT1KjQD0B

# LSTM Time Series Forecasting
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
from keras.metrics import MeanAbsoluteError

# Load Sample Dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv"
df = pd.read_csv(url)
df.columns = ['Month', 'Passengers']

# Plot the data
plt.figure(figsize=(10,5))
plt.plot(df['Passengers'])
plt.title("Monthly Airline Passengers")
plt.xlabel("Time")
plt.ylabel("Passengers")
plt.grid(True)
plt.show()

# Preprocessing
scaler = MinMaxScaler()
data = scaler.fit_transform(df[['Passengers']])

# Create sequences
def create_sequences(data, seq_length):
    x, y = [], []
    for i in range(len(data)-seq_length):
        x.append(data[i:i+seq_length])
        y.append(data[i+seq_length])
    return np.array(x), np.array(y)

SEQ_LEN = 10
X, y = create_sequences(data, SEQ_LEN)

# Split data
split = int(len(X)*0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Model
model = Sequential([
    LSTM(64, activation='relu', input_shape=(SEQ_LEN, 1)),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse', metrics=[MeanAbsoluteError()])
model.summary()

# Train
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30)

# Predict
preds = model.predict(X_test)
preds = scaler.inverse_transform(preds)
y_test_inv = scaler.inverse_transform(y_test)

# Plot results
plt.figure(figsize=(10,5))
plt.plot(y_test_inv, label='Actual')
plt.plot(preds, label='Predicted')
plt.legend()
plt.title("LSTM Forecast vs Actual")
plt.grid(True)
plt.show()

